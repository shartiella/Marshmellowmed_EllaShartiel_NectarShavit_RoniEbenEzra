@using Marshmellowmed_EllaShartiel_NectarShavit_RoniEbenEzra.Shared.Entities
@inject IDialogService DialogService
@inject HttpClient Http



<section class="singleItem">
    <div class="item-content">
        @if (thisItem.IsPicture == true)
        {
            <img src=@thisItem.ItemContent width="100" />
        }
        else
        {
            <p>@thisItem.ItemContent</p>
        }
    </div>

    <div class="item-overlay">
        <div class="item-buttons">
            <MudIconButton OnClick="EditItem" Icon="@Icons.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" />
            <MudIconButton OnClick="DeleteItem" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" />
            @*<MudIconButton OnClick="ZoomIn" Icon="@Icons.Filled.ZoomIn" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" />*@
        </div>
    </div>
</section>

@code {
    [Parameter]
    public Item thisItem { get; set; }

    [Parameter]
    public EventCallback<Item> DeletedItem { get; set; }

    [Parameter]
    public EventCallback<Item> UpdatedItem { get; set; }

    [Parameter]
    public string catName { get; set; }

    async Task EditItem() //עריכת הפריט הזה
    {
        var getResponse = await Http.GetAsync("api/Items/" + thisItem.ID); //שליפת הפרטים של הפריט מבסיס הנתונים
        if (getResponse.IsSuccessStatusCode == true)
        {

            Item itemFromController = getResponse.Content.ReadFromJsonAsync<Item>().Result; //קליטת הפריט למשתנה

            //הגדרת חלון דיאלוג חדש
            var parameters = new DialogParameters();
            parameters.Add("currentItem", itemFromController);
            parameters.Add("UpdatedItem", EventCallback.Factory.Create<Item>(this, AfterItemUpdate));

            var options = new DialogOptions() { CloseButton = true, DisableBackdropClick = true };
            DialogService.Show<ItemWindow>("עריכת פריט בקטגוריה "+ catName, parameters, options);

        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("Content", getResponse.Content.ReadAsStringAsync().Result);
            var options = new DialogOptions() { DisableBackdropClick = true };
            DialogService.Show<Error>("שגיאה", parameters, options);
        }

    }


    async Task DeleteItem()
    {
        var deleteResponse = await Http.DeleteAsync("api/Items/" + thisItem.ID);

        bool isDeleted = deleteResponse.Content.ReadFromJsonAsync<bool>().Result;

        if (isDeleted == true && deleteResponse.IsSuccessStatusCode == true)
        {
            await DeletedItem.InvokeAsync(thisItem);
        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("Content", deleteResponse.Content.ReadAsStringAsync().Result);
            var options = new DialogOptions() { DisableBackdropClick = true };
            DialogService.Show<Error>("שגיאה", parameters, options);
        }
    }

    void AfterItemUpdate(Item updatedItem)
    {
        UpdatedItem.InvokeAsync(updatedItem);
    }

    //void ZoomIn()
    //{
    //    var parameters = new DialogParameters();
    //    parameters.Add("imgURL", thisItem.ItemContent);
    //    var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

    //    DialogService.Show<ZoomIn>("הגדלה", parameters, options);
    //}



}