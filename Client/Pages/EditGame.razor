@using Marshmellowmed_EllaShartiel_NectarShavit_RoniEbenEzra.Shared.Entities
@inject HttpClient Http
@inject NavigationManager nav
@inject IDialogService DialogService

@page "/EditGame/{gameCode:int}"

<NavBar isPageGame="notCurrentPage" isPageEditor="currentPage"></NavBar>
<div class="edit-game">
    @if (singleGame != null) //אם נטען משחק
    {
        <EditForm Model="singleGame" OnValidSubmit="validSubmit">
            <header class="edit-game">
                <div class="game-name">
                    <h2>עריכת משחק - </h2>
                    @if (editingGameName == false)
                    {
                        <p class="game-name"> @singleGame.GameName</p>
                        <MudTooltip Text="עריכת שם המשחק" Arrow="true" Placement="Placement.Bottom">
                            <MudIconButton @onclick="EditGameName" Icon="@Icons.Filled.Edit" Color="Color.Primary"></MudIconButton>
                        </MudTooltip> }
                    else
                    {
                        <MudTextField AutoFocus="true" T="string" @bind-Value="singleGame.GameName" Counter="30" MaxLength="30" HelperText="" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="" Variant="Variant.Outlined" @onfocusout="SaveGameName" @onkeydown="SaveGameNameEnter" />
                    }
                </div>
                <input type="submit" value="שמירה וחזרה למשחקים שלי" class="mud-button-root mud-button mud-button-filled mud-button-filled-secondary mud-button-filled-size-medium mud-ripple" />
            </header>

            <section class="edit-game">
                <div class="game-verifications">
                    <h3>תנאים לפרסום המשחק:</h3>

                    <section class="GV category-number">
                        @if (categoriesCount >= 2)
                        {
                            <MudIcon Class="GVyes" Icon="@Icons.Outlined.Check"></MudIcon>
                        }
                        else
                        {
                            <MudIcon Class="GVno" Icon="@Icons.Outlined.Close"></MudIcon>
                        }
                        <div class="gvText">
                            <p>בין 2-5 קטגוריות</p>
                            <p>מספר קטגוריות: @categoriesCount.ToString()</p>
                        </div>
                    </section>

                    <section class="GV item-number">
                        @if (minItemCountperCat == categoriesCount && categoriesCount > 0)
                        {
                            <MudIcon Class="GVyes" Icon="@Icons.Outlined.Check"></MudIcon>
                        }
                        else
                        {
                            <MudIcon Class="GVno" Icon="@Icons.Outlined.Close"></MudIcon>
                        }

                        <div class="gvText">
                            <p>בין 2-4 פריטים בקטגוריה</p>
                            @if (categoriesCount - minItemCountperCat > 0)
                            {
                                <p>יש להוסיף פריטים ב-@(categoriesCount-minItemCountperCat) מהקטגוריות</p>
                            }
                            else
                            {
                                <p>בכל הקטגוריות יש לפחות 2 פריטים</p>
                            }
                        </div>
                    </section>

                    <section class="GV item-total-number">
                        @if (totalItemCount >= 10)
                        {
                            <MudIcon Class="GVyes" Icon="@Icons.Outlined.Check"></MudIcon>
                        }
                        else
                        {
                            <MudIcon Class="GVno" Icon="@Icons.Outlined.Close"></MudIcon>
                        }

                        <div class="gvText">
                            <p>בין 10-20 פריטים במשחק</p>
                            <p>מספר פריטים כולל: @totalItemCount.ToString()</p>
                        </div>
                    </section>

                    <section class="GV publish-game-btn">
                        @if (categoriesCount >= 2 && minItemCountperCat == categoriesCount && categoriesCount > 0 && totalItemCount >= 10) //אם הוא עומד בתנאי הפרסום
                        {
                            if (singleGame.IsPublished == false) //אם המשחק עוד לא פורסם
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="PublishGame" Disabled="false">פרסום משחק</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="UnPublishGame" Disabled="false">ביטול פרסום משחק</MudButton>
                            }
                        }
                        else //אם הוא לא עומד בתנאי הפרסום
                        {
                            singleGame.IsPublished = false;
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">פרסום משחק</MudButton>
                        }
                    </section>

                </div>

                <div id="categories-area">
                    @if (singleGame.GameCategories != null)//אם קיימת רשימת קטגוריות
                    {
                        if (singleGame.GameCategories.Count() > 0)//אם קיימות קטגוריות
                        {
                            foreach (Category c in singleGame.GameCategories)
                            {
                                <CategoryComp CategoryAll=@c DeletedCategory="DeleteCategoryAfter" ItemChange="AfterChangeInItems"></CategoryComp>
                            }

                        }
                        else
                        {
                            <p>לחצו על הכפתור כדי להוסיף קטגוריה</p>
                        }
                    }
                    else
                    {
                        <p>בעיה בטעינת רשימת הקטגוריות</p>
                    }
                    @if (categoriesCount >= 5)//אם הגיע למספר הקטגוריות המקסימלי
                    {
                        <MudTooltip Text="הגעת למספר הקטגוריות המקסימלי למשחק" Arrow="true" Placement="Placement.Bottom">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddNewCategory" Disabled="true">הוספת קטגוריה</MudButton>
                        </MudTooltip>
                    }
                    else //אם אפשר עוד להוסיף קטגוריות
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddNewCategory" Disabled="false">הוספת קטגוריה</MudButton>

                    }
                </div>
            </section>

        </EditForm>
    }
    else //אם לא נטען משחק
    {
        <p>המשחק לא נמצא</p>
    }

</div>

@code {

    [Parameter]
    public int gameCode { get; set; }

    Game singleGame = new Game();
    int categoriesCount;
    int minItemCountperCat = 0;
    int totalItemCount = 0;
    Category newCategory = new Category();
    bool editingGameName = false;

    protected async override Task OnInitializedAsync()
    {
        var getResponse = await Http.GetAsync("api/Games/byCode/" + gameCode);
        if (getResponse.IsSuccessStatusCode == true)
        {
            singleGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;
            categoriesCount = singleGame.GameCategories.Count();
            foreach (Category c in singleGame.GameCategories)
            {
                if (c.CategoryItems.Count() >= 2)
                {
                    minItemCountperCat++;
                }
                totalItemCount += c.CategoryItems.Count();
            }
        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("Content", getResponse.Content.ReadAsStringAsync().Result);
            var options = new DialogOptions() { DisableBackdropClick = true };
            DialogService.Show<Error>("שגיאה", parameters, options);
        }

    }

    async Task validSubmit()
    {
        var updateResponse = await Http.PostAsJsonAsync("api/Games/Update", singleGame); //קריאת עדכון לטבלת המשחקים

        if (updateResponse.IsSuccessStatusCode == true)
        {
            nav.NavigateTo("./Games/" + singleGame.UserID); //מעביר חזרה לעמוד רשימת המשחקים
        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("Content", updateResponse.Content.ReadAsStringAsync().Result);
            var options = new DialogOptions() { DisableBackdropClick = true };
            DialogService.Show<Error>("שגיאה", parameters, options);
        }
    }

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 30 < ch?.Length)
            yield return "עד 30 תווים";
    }


    void AddNewCategory()
    {
        //הגדרת נתוני הפריט הדיפולטיים
        newCategory.CategoryName = "";
        newCategory.GameID = singleGame.ID;
        newCategory.CategoryItems = new List<Item>();

        //הקפצת חלון עריכת הפריט החדש
        var parameters = new DialogParameters();
        parameters.Add("currentCategory", newCategory);
        parameters.Add("UpdatedCategory", EventCallback.Factory.Create<Category>(this, NewCategoryAfter));

        var options = new DialogOptions() { CloseButton = true };
        DialogService.Show<CategoryWindow>("הוספת קטגוריה חדשה למשחק " + singleGame.GameName, parameters, options);
    }

    void NewCategoryAfter(Category UpdatedCategory)
    {
        singleGame.GameCategories.Add(UpdatedCategory);
        categoriesCount = singleGame.GameCategories.Count();
    }

    void DeleteCategoryAfter(Category categoryToDelete)
    {
        singleGame.GameCategories.Remove(categoryToDelete);
        categoriesCount = singleGame.GameCategories.Count();
    }

    async Task PublishGame()
    {
        var publishResponse = await Http.PostAsJsonAsync("api/Games/Publish", singleGame); //קריאת עדכון לטבלת הפריטים

        if (publishResponse.IsSuccessStatusCode == true)
        {
            singleGame.IsPublished = publishResponse.Content.ReadFromJsonAsync<bool>().Result; //קבלת הפריט המעודכן מבסיס הנתונים
        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("Content", publishResponse.Content.ReadAsStringAsync().Result);
            var options = new DialogOptions() { DisableBackdropClick = true };
            DialogService.Show<Error>("שגיאה", parameters, options);
        }
    }

    async Task UnPublishGame()
    {
        var publishResponse = await Http.PostAsJsonAsync("api/Games/UnPublish", singleGame); //קריאת עדכון לטבלת הפריטים

        if (publishResponse.IsSuccessStatusCode == true)
        {
            singleGame.IsPublished = publishResponse.Content.ReadFromJsonAsync<bool>().Result; //קבלת הפריט המעודכן מבסיס הנתונים
        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("Content", publishResponse.Content.ReadAsStringAsync().Result);
            var options = new DialogOptions() { DisableBackdropClick = true };
            DialogService.Show<Error>("שגיאה", parameters, options);
        }
    }

    void AfterChangeInItems()
    {
        minItemCountperCat = 0;
        totalItemCount = 0;
        foreach (Category c in singleGame.GameCategories)
        {
            if (c.CategoryItems.Count() >= 2)
            {
                minItemCountperCat++;
            }
            totalItemCount += c.CategoryItems.Count();
        }
    }

    void EditGameName()
    {
        editingGameName = true;
    }

    void SaveGameName()
    {
        editingGameName = false;
    }

    void SaveGameNameEnter(KeyboardEventArgs e)
    {
        if (e.Code=="Enter"||e.Code=="NumpadEnter")
        {
            editingGameName = false;
        }
    }
}
