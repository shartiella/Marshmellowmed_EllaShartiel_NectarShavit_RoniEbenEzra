@page "/"
@inject HttpClient Http
@inject NavigationManager nav
@inject IDialogService DialogService

@using Marshmellowmed_EllaShartiel_NectarShavit_RoniEbenEzra.Shared.Entities

<div id="login-bg">


    <NavBar isPageGame="notCurrentPage" isPageEditor="currentPage"></NavBar>

    <div id="login-box">
        <h2>התחברות</h2>
        <EditForm Model="thisUser" OnValidSubmit="loginUser">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <MudTextField @bind-Value="thisUser.Email" Label="כתובת מייל" Variant="Variant.Filled" />
            <ValidationMessage For="@(() => thisUser.Email)" />
            <section class="btns-section">
                <input type="submit" value="כניסה" class="mud-button-root mud-button mud-button-filled mud-button-filled-primary mud-button-filled-size-medium mud-ripple" />
            </section>
        </EditForm>
        <div>
            <p>שליף - מיילים אפשריים:</p>
            <p>admin@mail.com telem@mail.com</p>
        </div>
    </div>
</div>


@code {
    User thisUser = new User();

    //string inputMail = "admin@mail.com";

    protected async override Task OnInitializedAsync() //למחוק את זה
    {
        //thisUser.Email = "admin@mail.com"; ///למחוק

        var loginUserCheck = await Http.GetAsync("api/users/Check"); //בודק האם מחובר משתמש כבר
        if (loginUserCheck.IsSuccessStatusCode == true) //אם מחובר משתמש
        {
            int userId = loginUserCheck.Content.ReadFromJsonAsync<int>().Result;
            nav.NavigateTo("./Games/" + userId); //מעביר לעמוד משחקים עם מספר היוזר
        }
    }

    async Task loginUser()
    {
        var loginUser = await Http.GetAsync("api/users/" + thisUser.Email); //שולף משתמש לפי האימייל ופותח לו סשן
        if (loginUser.IsSuccessStatusCode == true) //אם יש כזה והקריאה הצליחה
        {
            int userId = loginUser.Content.ReadFromJsonAsync<int>().Result;
            nav.NavigateTo("./Games/" + userId); //מעביר לעמוד משחקים עם מספר היוזר
        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("Content", loginUser.Content.ReadAsStringAsync().Result);
            var options = new DialogOptions() { DisableBackdropClick = true };
            DialogService.Show<Error>("שגיאה", parameters, options);
        }
    }

    //async Task invalidLogin()
    //{
    //    var parameters = new DialogParameters();
    //    parameters.Add("Content", "קלט לא תקין");
    //    var options = new DialogOptions() { DisableBackdropClick = true };
    //    DialogService.Show<Error>("שגיאה", parameters, options);
    //}

}
